#ifndef IN_GAME_BG_H
#define IN_GAME_BG_H
#include <ultra64.h>
#include "data.h"
#include "types.h"

void bg_unpause_props_in_room(u32 roomnum, bool tintedglassonly);
void bg_set_room_onscreen(s32 room, s32 draworder, struct screenbox *arg2);
void bg_get_room_brightness_range(s32 roomnum, u8 *min, u8 *max);
struct drawslot *bg_get_room_draw_slot(s32 roomnum);
Gfx *bg_render_xray_data(Gfx *gdl, struct xraydata *xraydata);
Gfx *bg_add_xray_tri(Gfx *gdl, struct xraydata *xraydata, s16 vertices1[3], s16 vertices2[3], s16 vertices3[3], u32 colour1, u32 colour2, u32 colour3);
void bg_choose_xray_vtx_colour(bool *inrange, s16 vertex[3], u32 *colour, struct xraydata *xraydata);
Gfx *bg_process_xray_tri(Gfx *gdl, struct xraydata *xraydata, s16 arg2[3], s16 arg3[3], s16 arg4[3], s32 arg5, s32 arg6, s32 arg7, s32 arg8, s32 arg9, s32 arg10);
Gfx *bg_render_gdl_in_xray(Gfx *gdl, s8 *readgdl, Vtx *vertices, s16 arg3[3]);
Gfx *bg_render_room_xray_pass(Gfx *gdl, s32 roomnum, struct roomblock *blocks, bool recurse, s16 arg4[3]);
Gfx *bg_render_room_in_xray(Gfx *gdl, s32 roomnum);
Gfx *bg_render_scene_in_xray(Gfx *gdl);
Gfx *bg_render_scene(Gfx *gdl);
Gfx *bg_render_artifacts(Gfx *gdl);
void bg_load_file(void *memaddr, u32 offset, u32 len);
s32 bg_get_stage_index(s32 stagenum);
f32 bg_calculate_portal_surface_area(s32 portal);
u8 bg_calculate_portal_alpha(s32 portal);
u32 not(u32 arg);
u32 bg_xor_babebabe(u32 value);
void bg_reset(s32 stagenum);
void bg_build_tables(s32 stagenum);
void bg_stop(void);
void bg_set_stage_translation_thing(f32 arg0);
f32 bg_get_stage_translation_thing(void);
f32 bg_get_scale_bg2gfx(void);
void bg_set_scale_bg2gfx(f32 arg0);
void bg_tick_counter(void);
void bg_tick(void);
Gfx *bg_render(Gfx *gdl);
Gfx *bg_scissor_to_viewport(Gfx *gdl);
Gfx *bg_scissor_within_viewport_f(Gfx *gdl, f32 viewleft, f32 viewtop, f32 viewright, f32 viewbottom);
Gfx *bg_scissor_within_viewport(Gfx *gdl, s32 viewleft, s32 viewtop, s32 viewright, s32 viewbottom);
void bg_clear_portal_camera_cache(void);
bool bg_room_intersects_screen_box(s32 room, struct screenbox *arg1);
bool bg_3d_pos_to_2d_pos(struct coord *cornerpos, struct coord *screenpos);
bool bg_get_portal_screen_bbox(s32 portal, struct screenbox *arg1);
Gfx *bg_draw_box_edge(Gfx *gdl, s32 x1, s32 y1, s32 x2, s32 y2);
bool bg_get_box_intersection(struct screenbox *a, struct screenbox *b);
void bg_expand_box(struct screenbox *a, struct screenbox *b);
void bg_copy_box(struct screenbox *dst, struct screenbox *src);
bool bg_room_is_onscreen(s32 room);
bool bg_room_is_standby(s32 room);
bool bg_room_is_on_player_screen(s32 room, u32 playernum);
bool bg_room_is_on_player_standby(s32 room, u32 aibotindex);
s32 bg_find_portal_by_vertices(struct portalvertices *pvertices);
u32 bg_inflate(u8 *src, u8 *dst, u32 len);
Gfx *bg_get_next_gdl_in_block(struct roomblock *block, Gfx *start, Gfx *end);
Gfx *bg_get_next_gdl_in_layer(s32 roomnum, Gfx *start, u32 types);
Vtx *bg_find_vertices_for_gdl(s32 roomnum, Gfx *gdl);
void bg_load_room(s32 roomnum);
void bg_unload_room(s32 room);
void bg_unload_all_rooms(void);
void bg_garbage_collect_rooms(s32 bytesneeded, bool desparate);
void bg_tick_rooms(void);
Gfx *bg_render_room_pass(Gfx *gdl, s32 roomnum, struct roomblock *blocks, bool arg3);
Gfx *bg_render_room_opaque(Gfx *gdl, s32 roomnum);
Gfx *bg_render_room_xlu(Gfx *gdl, s32 roomnum);
s32 bg_populate_vtx_batch_type(s32 roomnum, struct vtxbatch *batches, Gfx *gdl, s32 batchindex, Vtx *vertices, s32 arg5);
void bg_find_room_vtx_batches(s32 roomnum);
bool bg_test_line_intersects_int_bbox(struct coord *arg0, struct coord *arg1, s32 *arg2, s32 *arg3);
bool bg_test_line_intersects_bbox(struct coord *arg0, struct coord *arg1, struct coord *arg2, struct coord *arg3);
bool bg_test_hit_on_obj(struct coord *arg0, struct coord *arg1, struct coord *arg2, Gfx *gdl, Gfx *gdl2, Vtx *vertices, struct hitthing *hitthing);
bool bg_test_hit_on_chr(struct model *model, struct coord *arg1, struct coord *arg2, struct coord *arg3, Gfx *arg4, Gfx *arg5, Vtx *vertices, f32 *arg7, struct hitthing *hitthing);
bool bg_test_hit_in_vtx_batch(struct coord *arg0, struct coord *arg1, struct coord *arg2, struct vtxbatch *batches, s32 roomnum, struct hitthing *hitthing);
s32 bg0f1612e4(struct coord *bbmin, struct coord *bbmax, struct coord *frompos, struct coord *dist, struct coord *arg4, struct coord *arg5);
bool bg_test_hit_in_room(struct coord *frompos, struct coord *topos, s32 roomnum, struct hitthing *hitthing);
bool bg_room_is_loaded(s32 room);
bool bg_room_contains_coord(struct coord *pos, RoomNum roomnum);
bool bg_test_pos_in_room_cheap(struct coord *pos, RoomNum roomnum);
bool bg_test_pos_in_room_expensive(struct coord *pos, RoomNum roomnum);
bool bg_test_pos_in_room(struct coord *pos, RoomNum roomnum);
void bg_find_rooms_by_pos(struct coord *pos, RoomNum *inrooms, RoomNum *aboverooms, s32 max, RoomNum *bestroom);
bool bg_cmd_push_value(bool value);
bool bg_cmd_pop_value(void);
bool bg_cmd_get_nth_value_from_end(s32 offset);
struct bgcmd *bg_cmd_execute_branch(struct bgcmd *cmd, bool s2);
struct bgcmd *bg_cmd_execute(struct bgcmd *cmd);
void bg_tick_portals_xray(void);
void bg_add_to_queue(RoomNum fromroomnum, RoomNum roomnum, s16 draworder, struct screenbox *box);
void bg_process_queue_item(struct bgqueueitem *arg0);
bool bg_try_process_queue(void);
void bg_choose_rooms_to_load(void);
void bg_tick_portals(void);
Gfx *bg_render_scene_and_load_candidate(Gfx *gdl);
s32 bg_get_force_onscreen_rooms(RoomNum *rooms, s32 len);
s32 bg_room_get_neighbours(s32 room, RoomNum *rooms, s32 len);
bool bg_rooms_are_neighbours(s32 roomnum1, s32 roomnum2);
void bg_calculate_screen_properties(void);
void bg_expand_room_to_portals(s32 roomnum);
void bg_portal_swap_rooms(s32 portal);
void bg_init_portal(s32 portalnum);
void bg_init_room(s32 roomnum);
void bg_set_portal_open_state(s32 portal, bool open);
s32 bg_find_portal_between_positions(struct coord *pos1, struct coord *pos2);
bool bg_is_bbox_overlapping(struct coord *arg0, struct coord *arg1, struct coord *arg2, struct coord *arg3);
void bg_calculate_portal_bbox(s32 portalnum, struct coord *bbmin, struct coord *bbmax);
void bg_find_entered_rooms(struct coord *bbmin, struct coord *upper, RoomNum *rooms, s32 maxlen, bool arg4);

#endif
