#ifndef _IN_GAME_MPLAYER_SETUP_H
#define _IN_GAME_MPLAYER_SETUP_H
#include <ultra64.h>
#include "data.h"
#include "types.h"

char *mp_get_current_player_name(struct menuitem *item);
s16 mp_choose_random_stage(void);
MenuItemHandlerResult mp_arena_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_weapon_name_for_slot(struct menuitem *item);
char *mp_menu_text_setup_name(struct menuitem *item);
MenuItemHandlerResult mp_character_body_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data, s32 mpbodynum, s32 mpheadnum, bool isplayer);
MenuDialogHandlerResult menudialog0017a174(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult mp_challenges_list_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_kills(struct menuitem *item);
char *mp_menu_text_deaths(struct menuitem *item);
char *mp_menu_text_games_played(struct menuitem *item);
char *mp_menu_text_games_won(struct menuitem *item);
char *mp_menu_text_games_lost(struct menuitem *item);
char *mp_menu_text_head_shots(struct menuitem *item);
char *mp_menu_text_medal_accuracy(struct menuitem *item);
char *mp_menu_text_medal_head_shot(struct menuitem *item);
char *mp_menu_text_medal_kill_master(struct menuitem *item);
char *mp_menu_text_medal_survivor(struct menuitem *item);
char *mp_menu_text_ammo_used(struct menuitem *item);
char *mp_menu_text_distance(struct menuitem *item);
char *mp_menu_text_time(struct menuitem *item);
char *mp_menu_text_accuracy(struct menuitem *item);
void mp_format_damage_value(char *dst, f32 damage);
char *mp_menu_text_pain_received(struct menuitem *item);
char *mp_menu_text_damage_dealt(struct menuitem *item);
MenuItemHandlerResult mp_medal_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_title_stats_for_player_name(struct menudialogdef *dialogdef);
char *mp_menu_text_username_password(struct menuitem *item);
MenuItemHandlerResult mp_character_head_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data, s32 mpheadnum, bool arg4);
char *mp_menu_text_body_name(struct menuitem *item);
void func0f17b8f0(void);
MenuItemHandlerResult mp_player_name_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult mp_load_settings_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_mpconfig_marquee(struct menuitem *item);
MenuItemHandlerResult mp_load_player_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_handicap_player(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_handicap_player_name(struct menuitem *item);
MenuItemHandlerResult mp_add_change_simulant_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_simulant_description(struct menuitem *item);
MenuDialogHandlerResult menudialog0017ccfc(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult mp_bot_difficulty_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_title_edit_simulant(struct menudialogdef *dialogdef);
char *mp_menu_text_simulant_name(struct menuitem *item);
MenuItemHandlerResult menuhandler_mp_n_teams(s32 operation, struct menuitem *item, union handlerdata *data, s32 numteams);
char *mp_menu_text_chr_name_for_team_setup(struct menuitem *item);
MenuItemHandlerResult func0f17dac4(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_select_tune_or_tunes(struct menuitem *item);
MenuItemHandlerResult mp_select_tune_list_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_current_track(struct menuitem *item);
MenuItemHandlerResult mp_team_name_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_team_name(struct menuitem *item);
char *func0f17e318(struct menudialogdef *dialogdef);
MenuDialogHandlerResult menudialog0017e3fc(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult mp_challenges_list_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
char *mp_menu_text_challenge_name(struct menuitem *item);
MenuDialogHandlerResult mp_combat_challenges_menu_dialog(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
char *mp_menu_text_save_player_or_copy(struct menuitem *item);
char *mp_menu_text_arena_name(struct menuitem *item);
char *mp_menu_text_weapon_set_name(struct menuitem *item);
void mp_configure_quick_team_players(void);
void mp_configure_quick_team_simulants(void);
void func0f17f428(void);
MenuItemHandlerResult menuhandler_player_team(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_number_of_simulants(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_simulants_per_team(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult mp_quick_team_simulant_difficulty_handler(s32 operation, struct menuitem *item, union handlerdata *data);
void mp_close_dialogs_for_new_setup(void);
void func0f17fcb0(s32 silent);
MenuItemHandlerResult menuhandler_mp_slow_motion(s32 operation, struct menuitem *item, union handlerdata *data);
void htb_add_pad(s16 padnum);
void htb_remove_ammo_crate_at_pad(s16 padnum);
void htb_reset(void);
void htb_create_token(void);
Gfx *htb_render_hud(Gfx *gdl);
void ctc_init_props(void);
bool ctc_highlight_prop(struct prop *prop, s32 *colour);
void ctc_add_pad(s32 *cmd);
void ctc_highlight_room(RoomNum roomnum, s32 *arg1, s32 *arg2, s32 *arg3);
void koh_tick(void);
Gfx *koh_render_hud(Gfx *gdl);
void koh_add_hill(s32 *cmd);
void koh_highlight_room(RoomNum roomnum, s32 *arg1, s32 *arg2, s32 *arg3);
void htm_add_pad(s16 padnum);
void htm_reset(void);
void htb_create_uplink(void);
void htm_init_props(void);
void htm_tick_chr(struct chrdata *chr);
Gfx *htm_render_hud(Gfx *gdl);
Gfx *htm_radar_extra(Gfx *gdl);
void pac_reset(void);
bool pac_highlight_prop(struct prop *prop, s32 *colour);
void pac_apply_next_victim(void);
void pac_handle_death(s32 cplayernum, s32 vplayernum);
void pac_tick(void);
Gfx *pac_render_hud(Gfx *gdl);
bool pac_radar_chr(Gfx **gdl, struct prop *prop);
MenuDialogHandlerResult mp_options_menu_dialog(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
char *mp_menu_text_scenario_short_name(struct menuitem *item);
char *mp_menu_text_scenario_name(struct menuitem *item);
MenuItemHandlerResult scenario_scenario_menu_handler(s32 operation, struct menuitem *item, union handlerdata *data);
void scenario_create_match_start_hudmsgs(void);
Gfx *scenario_render_hud(Gfx *gdl);
void scenario_calculate_player_score(struct mpchrconfig *mpchr, s32 chrnum, s32 *arg2, s32 *arg3);
bool scenario_highlight_prop(struct prop *prop, s32 *colour);
void scenario_reset(void);
struct prop *scenario_create_obj(s32 modelnum, s16 padnum, f32 arg2, u32 flags, u32 flags2, u32 flags3);
void scenario_create_hudmsg(s32 playernum, char *message);
bool scenario_chrs_are_same_team(s32 playernum1, s32 playernum2);
s32 scenario_pick_up_briefcase(struct chrdata *chr, struct prop *prop);
void scenario_handle_dropped_token(struct chrdata *chr, struct prop *prop);
s32 scenario_pick_up_uplink(struct chrdata *chr, struct prop *prop);
void scenario_handle_activated_prop(struct chrdata *chr, struct prop *prop);
MenuItemHandlerResult menuhandler_mp_drop_out(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_teams_label(s32 operation, struct menuitem *item, union handlerdata *data);
s32 mp_get_num_stages(void);
MenuItemHandlerResult menuhandler_mp_control_style(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_weapon_slot(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_weapon_set_dropdown(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_control_checkbox(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_aim_control(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_checkbox_option(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_teams_enabled(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_display_option_checkbox(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_confirm_save_chr(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_setup_name(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_save_setup_overwrite(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_save_setup_copy(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_character_body(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_username_password(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_character_head(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_time_limit_slider(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_score_limit_slider(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_team_score_limit_slider(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_restore_score_defaults(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_restore_handicap_defaults(s32 operation, struct menuitem *item, union handlerdata *data);
MenuDialogHandlerResult menudialog_mp_ready(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuDialogHandlerResult menudialog_mp_simulant(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_simulant_head(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_simulant_body(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_delete_simulant(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_change_simulant_type(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_clear_all_simulants(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_add_simulant(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_simulant_slot(s32 operation, struct menuitem *item, union handlerdata *data);
MenuDialogHandlerResult menudialog_mp_simulants(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_two_teams(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_three_teams(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_four_teams(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_maximum_teams(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_humans_vs_simulants(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_human_simulant_pairs(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_team_slot(s32 operation, struct menuitem *item, union handlerdata *data);
MenuDialogHandlerResult menudialog_mp_select_tune(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_multiple_tunes(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_team_name_slot(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler0017e38c(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler0017e9d8(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_abort_challenge(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_start_challenge(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler0017ec64(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_lock(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_save_player(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler0017ef30(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_save_settings(s32 operation, struct menuitem *item, union handlerdata *data);
MenuDialogHandlerResult menudialog_mp_game_setup(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuDialogHandlerResult menudialog_mp_quick_go(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_finished_setup(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_quick_team_separator(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_quick_team_option(s32 operation, struct menuitem *item, union handlerdata *data);
MenuDialogHandlerResult menudialog_combat_simulator(s32 operation, struct menudialogdef *dialogdef, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_advanced_setup(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_display_team(s32 operation, struct menuitem *item, union handlerdata *data);
MenuItemHandlerResult menuhandler_mp_one_hit_kills(s32 operation, struct menuitem *item, union handlerdata *data);

#endif
